#include <iostream>
using namespace std;
struct Process
{
    int pid;
    int arrival_time;
    int burst_time;
    int completion_time;
    int turn_around_time;
    int waiting_time;
};

void findCompletionTime(Process proc[], int x) {
    proc[0].completion_time = proc[0].burst_time;
    for (int i = 1; i < x; i++) {
        proc[i].completion_time = proc[i - 1].completion_time + proc[i].burst_time;
    }
}

void findTurnAroundTime(Process proc[], int x) {
    for (int i = 0; i < x; i++) {
        proc[i].turn_around_time = proc[i].completion_time - proc[i].arrival_time;
    }
}

void findWaitingTime(Process proc[], int x) {
    proc[0].waiting_time = 0;
    for (int i = 1; i < x; i++) {
        proc[i].waiting_time = proc[i].turn_around_time - proc[i].burst_time;
    }
}

void findFCFS(Process proc[], int x) {
    findCompletionTime(proc, x);
    findTurnAroundTime(proc, x);
    findWaitingTime(proc, x);
}

void printFCFS(Process proc[], int x) {
    cout << "FCFS Scheduling : " << endl;
    cout << "PID\tArrival Time\tBurstTime\tCompletion Time\tTurnaround Time\tWaiting Time" << endl;
    for (int i = 0; i < x; i++) {
        cout << proc[i].pid << "\t\t" << proc[i].arrival_time << "\t\t" << proc[i].burst_time << "\t\t"
            << proc[i].completion_time << "\t\t" << proc[i].turn_around_time << "\t\t" << proc[i].waiting_time << endl;
    }
}

int main()
{
    int x = 5;
    Process proc[x] = { {1,0,5}, {2,1,3}, {3,2,2}, {4,3,4}, {5,4,1} };
    findFCFS(proc, x);
    printFCFS(proc, x);
    
    return 0;
}
